version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:18.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip
            pip install awscli
      - run:
          name: Build application Docker image
          command: |
            docker build -t app .

      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              CLUSTER='sample-webapp-cluster'
              FAMILY='aws-steps-app'
              DOCKER_IMAGE='aws-steps/app'
              TASK='aws-steps-app'
              SERVICE='aws-steps-app-service'
              # Login to AWS
              aws configure set region $AWS_REGION
              $(aws ecr get-login --no-include-email)
              # Tag and push docker image
              docker tag app $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE:$CIRCLE_SHA1
              docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE:$CIRCLE_SHA1
              # Create task for docker deploy
              task_template='[
                {
                  "name": "%s",
                  "image": "%s.dkr.ecr.%s.amazonaws.com/%s:%s",
                  "essential": true,
                  "memoryReservation": 256,
                  "portMappings": [
                    {
                      "containerPort": 8000,
                      "hostPort": 8000
                    }
                  ],
                  "environment" : [
                      { "name" : "DEBUG", "value" : "False" },
                      { "name" : "DOCKPGHOST", "value" : "%s" },
                      { "name" : "DOCKPGPORT", "value" : "5432" },
                      { "name" : "DOCKPGDB", "value" : "soylatte" },
                      { "name" : "DOCKPGUSER", "value" : "postgres" },
                      { "name" : "DOCKPGPASSWD", "value" : "%s" },
                      { "name" : "SECRET_KEY", "value" : "%s" },
                      { "name" : "NEVERCACHE_KEY", "value" : "%s" }
                  ]
                }
              ]'
              echo "$task_template"
              task_def=$(printf "$task_template" $TASK $AWS_ACCOUNT_ID $AWS_REGION $DOCKER_IMAGE $CIRCLE_SHA1 $DOCKPGHOST $DOCKPGPASSWD $SECRET_KEY $NEVERCACHE_KEY)
              # Register task definition
              json=$(aws ecs register-task-definition --container-definitions "$task_def" --family "$FAMILY")
              # Grab revision # using regular bash and grep
              revision=$(echo "$json" | grep -o '"revision": [0-9]*' | grep -Eo '[0-9]+')
              # Deploy revision
              aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$TASK":"$revision"
              return 0
            fi
